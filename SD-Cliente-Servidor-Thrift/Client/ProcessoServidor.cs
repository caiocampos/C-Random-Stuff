/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace processo
{
  public partial class ProcessoServidor {
    public interface Iface {
      Resultado armazenar(string nome, string telefone);
      #if SILVERLIGHT
      IAsyncResult Begin_armazenar(AsyncCallback callback, object state, string nome, string telefone);
      Resultado End_armazenar(IAsyncResult asyncResult);
      #endif
      Resultado atualizar(string nome, string telefone);
      #if SILVERLIGHT
      IAsyncResult Begin_atualizar(AsyncCallback callback, object state, string nome, string telefone);
      Resultado End_atualizar(IAsyncResult asyncResult);
      #endif
      Resultado remover(string nome);
      #if SILVERLIGHT
      IAsyncResult Begin_remover(AsyncCallback callback, object state, string nome);
      Resultado End_remover(IAsyncResult asyncResult);
      #endif
      Resultado recuperar(string nome);
      #if SILVERLIGHT
      IAsyncResult Begin_recuperar(AsyncCallback callback, object state, string nome);
      Resultado End_recuperar(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_armazenar(AsyncCallback callback, object state, string nome, string telefone)
      {
        return send_armazenar(callback, state, nome, telefone);
      }

      public Resultado End_armazenar(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_armazenar();
      }

      #endif

      public Resultado armazenar(string nome, string telefone)
      {
        #if !SILVERLIGHT
        send_armazenar(nome, telefone);
        return recv_armazenar();

        #else
        var asyncResult = Begin_armazenar(null, null, nome, telefone);
        return End_armazenar(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_armazenar(AsyncCallback callback, object state, string nome, string telefone)
      #else
      public void send_armazenar(string nome, string telefone)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("armazenar", TMessageType.Call, seqid_));
        armazenar_args args = new armazenar_args();
        args.Nome = nome;
        args.Telefone = telefone;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Resultado recv_armazenar()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        armazenar_result result = new armazenar_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "armazenar failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_atualizar(AsyncCallback callback, object state, string nome, string telefone)
      {
        return send_atualizar(callback, state, nome, telefone);
      }

      public Resultado End_atualizar(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_atualizar();
      }

      #endif

      public Resultado atualizar(string nome, string telefone)
      {
        #if !SILVERLIGHT
        send_atualizar(nome, telefone);
        return recv_atualizar();

        #else
        var asyncResult = Begin_atualizar(null, null, nome, telefone);
        return End_atualizar(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_atualizar(AsyncCallback callback, object state, string nome, string telefone)
      #else
      public void send_atualizar(string nome, string telefone)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("atualizar", TMessageType.Call, seqid_));
        atualizar_args args = new atualizar_args();
        args.Nome = nome;
        args.Telefone = telefone;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Resultado recv_atualizar()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        atualizar_result result = new atualizar_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "atualizar failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_remover(AsyncCallback callback, object state, string nome)
      {
        return send_remover(callback, state, nome);
      }

      public Resultado End_remover(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_remover();
      }

      #endif

      public Resultado remover(string nome)
      {
        #if !SILVERLIGHT
        send_remover(nome);
        return recv_remover();

        #else
        var asyncResult = Begin_remover(null, null, nome);
        return End_remover(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_remover(AsyncCallback callback, object state, string nome)
      #else
      public void send_remover(string nome)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("remover", TMessageType.Call, seqid_));
        remover_args args = new remover_args();
        args.Nome = nome;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Resultado recv_remover()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        remover_result result = new remover_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "remover failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_recuperar(AsyncCallback callback, object state, string nome)
      {
        return send_recuperar(callback, state, nome);
      }

      public Resultado End_recuperar(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_recuperar();
      }

      #endif

      public Resultado recuperar(string nome)
      {
        #if !SILVERLIGHT
        send_recuperar(nome);
        return recv_recuperar();

        #else
        var asyncResult = Begin_recuperar(null, null, nome);
        return End_recuperar(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_recuperar(AsyncCallback callback, object state, string nome)
      #else
      public void send_recuperar(string nome)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("recuperar", TMessageType.Call, seqid_));
        recuperar_args args = new recuperar_args();
        args.Nome = nome;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Resultado recv_recuperar()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        recuperar_result result = new recuperar_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "recuperar failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["armazenar"] = armazenar_Process;
        processMap_["atualizar"] = atualizar_Process;
        processMap_["remover"] = remover_Process;
        processMap_["recuperar"] = recuperar_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void armazenar_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        armazenar_args args = new armazenar_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        armazenar_result result = new armazenar_result();
        result.Success = iface_.armazenar(args.Nome, args.Telefone);
        oprot.WriteMessageBegin(new TMessage("armazenar", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void atualizar_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        atualizar_args args = new atualizar_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        atualizar_result result = new atualizar_result();
        result.Success = iface_.atualizar(args.Nome, args.Telefone);
        oprot.WriteMessageBegin(new TMessage("atualizar", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void remover_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        remover_args args = new remover_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        remover_result result = new remover_result();
        result.Success = iface_.remover(args.Nome);
        oprot.WriteMessageBegin(new TMessage("remover", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void recuperar_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        recuperar_args args = new recuperar_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        recuperar_result result = new recuperar_result();
        result.Success = iface_.recuperar(args.Nome);
        oprot.WriteMessageBegin(new TMessage("recuperar", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class armazenar_args : TBase
    {
      private string _nome;
      private string _telefone;

      public string Nome
      {
        get
        {
          return _nome;
        }
        set
        {
          __isset.nome = true;
          this._nome = value;
        }
      }

      public string Telefone
      {
        get
        {
          return _telefone;
        }
        set
        {
          __isset.telefone = true;
          this._telefone = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nome;
        public bool telefone;
      }

      public armazenar_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Nome = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Telefone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("armazenar_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Nome != null && __isset.nome) {
          field.Name = "nome";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Nome);
          oprot.WriteFieldEnd();
        }
        if (Telefone != null && __isset.telefone) {
          field.Name = "telefone";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Telefone);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("armazenar_args(");
        sb.Append("Nome: ");
        sb.Append(Nome);
        sb.Append(",Telefone: ");
        sb.Append(Telefone);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class armazenar_result : TBase
    {
      private Resultado _success;

      public Resultado Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public armazenar_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Resultado();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("armazenar_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("armazenar_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class atualizar_args : TBase
    {
      private string _nome;
      private string _telefone;

      public string Nome
      {
        get
        {
          return _nome;
        }
        set
        {
          __isset.nome = true;
          this._nome = value;
        }
      }

      public string Telefone
      {
        get
        {
          return _telefone;
        }
        set
        {
          __isset.telefone = true;
          this._telefone = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nome;
        public bool telefone;
      }

      public atualizar_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Nome = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Telefone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("atualizar_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Nome != null && __isset.nome) {
          field.Name = "nome";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Nome);
          oprot.WriteFieldEnd();
        }
        if (Telefone != null && __isset.telefone) {
          field.Name = "telefone";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Telefone);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("atualizar_args(");
        sb.Append("Nome: ");
        sb.Append(Nome);
        sb.Append(",Telefone: ");
        sb.Append(Telefone);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class atualizar_result : TBase
    {
      private Resultado _success;

      public Resultado Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public atualizar_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Resultado();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("atualizar_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("atualizar_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class remover_args : TBase
    {
      private string _nome;

      public string Nome
      {
        get
        {
          return _nome;
        }
        set
        {
          __isset.nome = true;
          this._nome = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nome;
      }

      public remover_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Nome = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("remover_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Nome != null && __isset.nome) {
          field.Name = "nome";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Nome);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("remover_args(");
        sb.Append("Nome: ");
        sb.Append(Nome);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class remover_result : TBase
    {
      private Resultado _success;

      public Resultado Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public remover_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Resultado();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("remover_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("remover_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class recuperar_args : TBase
    {
      private string _nome;

      public string Nome
      {
        get
        {
          return _nome;
        }
        set
        {
          __isset.nome = true;
          this._nome = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nome;
      }

      public recuperar_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Nome = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("recuperar_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Nome != null && __isset.nome) {
          field.Name = "nome";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Nome);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("recuperar_args(");
        sb.Append("Nome: ");
        sb.Append(Nome);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class recuperar_result : TBase
    {
      private Resultado _success;

      public Resultado Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public recuperar_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Resultado();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("recuperar_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("recuperar_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
